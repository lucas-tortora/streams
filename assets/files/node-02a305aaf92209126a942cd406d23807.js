const streams=require("../node/iota_streams_wasm"),fetch=require("node-fetch");async function main(){let e="https://chrysalis-nodes.iota.org/",o=new streams.SendOptions(e,!0),n=N(81),s=new streams.Author(n,o.clone(),streams.ChannelType.SingleBranch);console.log("channel address: ",s.channel_address()),console.log("multi branching: ",s.is_multi_branching());let l=await s.clone().send_announce(),t=l.link;console.log("announced at: ",t.toString()),console.log("Announce message index: "+t.toMsgIndexHex());let c=await s.clone().get_client().get_link_details(t);console.log("Announce message id: "+c.get_metadata().message_id);let a=N(81),r=new streams.Subscriber(a,o.clone());await r.clone().receive_announcement(t.copy());let i=r.author_public_key();console.log("Channel registered by subscriber, author's public key: ",i);let g=r.fetch_state();console.log("Subscribing..."),l=await r.clone().send_subscribe(t.copy());let u=l.link;console.log("Subscription message at: ",u.toString()),console.log("Subscription message index: "+u.toMsgIndexHex()),await s.clone().receive_subscribe(u.copy()),console.log("Subscription processed"),console.log("Sending Keyload"),l=await s.clone().send_keyload_for_everyone(t.copy());let d=l.link;console.log("Keyload message at: ",d.toString()),console.log("Keyload message index: "+d.toMsgIndexHex()),console.log("Subscriber syncing..."),await r.clone().sync_state();let b=I("Public"),h=I("Masked");console.log("Subscriber Sending tagged packet"),l=await r.clone().send_tagged_packet(d,b,h);let m=l.link;console.log("Tag packet at: ",m.toString()),console.log("Tag packet index: "+m.toMsgIndexHex());let _=m;console.log("Subscriber Sending multiple signed packets");for(var p=0;p<10;p++)l=await r.clone().send_signed_packet(_,b,h),_=l.link,console.log("Signed packet at: ",_.toString()),console.log("Signed packet index: "+_.toMsgIndexHex());console.log("\nAuthor fetching next messages");let f=!0;for(;f;){let e=await s.clone().fetch_next_msgs();0===e.length&&(f=!1);for(var y=0;y<e.length;y++)console.log("Found a message..."),console.log("Public: ",R(e[y].message.get_public_payload()),"\tMasked: ",R(e[y].message.get_masked_payload()))}console.log("\nSubscriber resetting state"),r.clone().reset_state();let k=r.fetch_state();var S=!0;for(y=0;y<k.length;y++)g[y].link.toString()==k[y].link.toString()&&g[y].seqNo==k[y].seqNo&&g[y].branchNo==k[y].branchNo||(S=!1);S?console.log("States match"):console.log("States do not match"),console.log("\nAuthor fetching prev messages");let w=await s.clone().fetch_prev_msgs(_,3);for(var x=0;x<w.length;x++)console.log("Found a message at ",w[x].link.toString()),console.log("Found a message at index: "+w[x].link.toMsgIndexHex());console.log("\nExporting and importing state");let v="password",A=s.clone().export(v),M=new streams.Client(e,o.clone());streams.Author.import(M,A,v).channel_address!==s.channel_address?console.log("import failed"):console.log("import succesfull"),console.log("\nRecovering without state import"),(await streams.Author.recover(n,t.copy(),streams.ChannelType.SingleBranch,o.clone())).channel_address!==s.channel_address?console.log("recovery failed"):console.log("recovery succesfull"),console.log("\nSub sending unsubscribe message"),l=await r.clone().send_unsubscribe(u),await s.clone().receive_unsubscribe(l.link),console.log("Author received unsubscribe and processed it"),console.log("\nAuthor sending new keyload to all subscribers"),l=await s.clone().send_keyload_for_everyone(t.copy()),await r.receive_keyload(l.link)?console.log("unsubscription unsuccessful"):console.log("unsubscription successful");let H=N(81),q=new streams.Subscriber(H,o.clone());await q.clone().receive_announcement(t.copy());let C=q.get_public_key();function I(e){for(var o=[],n=0;n<e.length;++n)o.push(e.charCodeAt(n));return o}function R(e){for(var o="",n=0;n<e.length;++n)o+=String.fromCharCode(e[n]);return o}function N(e){const o="abcdefghijklmnopqrstuvwxyz";let n="";for(y=9;y<e;y++)n+=o[Math.floor(Math.random()*o.length)];return n}s.clone().store_new_subscriber(C),console.log("\nAuthor manually subscribed sub 2"),s.clone().remove_subscriber(C),console.log("Author manually unsubscribed sub 2")}global.fetch=fetch,global.Headers=fetch.Headers,global.Request=fetch.Request,global.Response=fetch.Response,streams.set_panic_hook(),main().then((()=>{console.log("Done example")})).catch((e=>{console.log(e)}));